name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pylint black isort mypy

    - name: Run Black (code formatter check)
      run: |
        black --check --diff .
      continue-on-error: true

    - name: Run isort (import sorting check)
      run: |
        isort --check-only --diff .
      continue-on-error: true

    - name: Run Flake8 (linting)
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run Pylint
      run: |
        pylint --rcfile=.pylintrc $(git ls-files '*.py') || true
      continue-on-error: true

    - name: Run MyPy (type checking)
      run: |
        mypy --ignore-missing-imports --no-strict-optional . || true
      continue-on-error: true

    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Check test coverage threshold
      run: |
        coverage report --fail-under=50 || echo "Warning: Coverage below 50%"
      continue-on-error: true

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Run Safety (dependency vulnerability check)
      run: |
        safety check --json || true
      continue-on-error: true

    - name: Run Bandit (security linting)
      run: |
        bandit -r . -f json -o bandit-report.json || true
      continue-on-error: true

    - name: Upload Bandit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json

  build-status:
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    if: always()
    
    steps:
    - name: Check build status
      run: |
        if [ "${{ needs.lint-and-test.result }}" == "success" ]; then
          echo "✅ All tests and linting passed!"
        else
          echo "⚠️ Some checks failed. Review the logs above."
        fi
